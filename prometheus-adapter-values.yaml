prometheus:
  url: http://prometheus-kube-prometheus-prometheus.prometheus.svc.cluster.local
  port: 9090
  path: ""

image:
  repository: k8s.gcr.io/prometheus-adapter/prometheus-adapter
  tag: v0.10.0
  pullPolicy: IfNotPresent

rules:
  default: false
  custom:
  - seriesQuery: '{__name__=~"^.*_total",pod!="",namespace!=""}'
    resources:
      template: "<<.Resource>>"
    name:
      matches: "^(.*)_total$"
      as: "${1}_per_minute"
    metricsQuery: 'sum(delta(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)'
  - seriesQuery: '{__name__=~"^.*_total",pod!="",namespace!=""}'
    resources:
      template: "<<.Resource>>"
    name:
      matches: "^(.*)_total$"
      as: "${1}_rate"
    metricsQuery: 'sum(rate(<<.Series>>{<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>)'
  resource:
    cpu:
      containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[3m])) by (<<.GroupBy>>)
      nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[3m])) by (<<.GroupBy>>)
      resources:
        overrides:
          node:
            resource: node
          namespace:
            resource: namespace
          pod:
            resource: pod
      containerLabel: container
    memory:
      containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
      nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
      resources:
        overrides:
          node:
            resource: node
          namespace:
            resource: namespace
          pod:
            resource: pod
      containerLabel: container
    window: 3m
